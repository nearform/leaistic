# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

defaults: &defaults
  docker:
    - image: circleci/node:10.1

version: 2
jobs:
  checkout:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths: .

  docker-compose:
    <<: *defaults
    steps:
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - persist_to_workspace:
          root: /usr/local/bin
          paths: docker-compose

  install:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - leaistic-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - leaistic-dependencies-

      - run: yarn
      # Persist the specified paths into the workspace for usage in later jobs
      - persist_to_workspace:
          root: .
          paths: .

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d
            # docker-compose will start 2 containers, the one with service will be named `elasticsearch`
            # we start another container with curl in the same network as `elasticsearch`, this way we have
            # all exposed ports from `elasticsearch` available on `localhost` in this new container
            docker run --network container:elasticsearch \
              appropriate/curl --retry 60 --retry-delay 1 --retry-connrefused http://127.0.0.1:9200/_cat/health
      - run:
          name: Change ES log level
          command: |
            docker run --network container:elasticsearch \
            appropriate/curl -X PUT --retry 60 --retry-delay 1 --retry-connrefused \
            -H 'Content-Type: application/json; charset=UTF-8' \
            -d '{"transient": {"logger._root": "DEBUG"}}' \
            http://127.0.0.1:9200/_cluster/settings
      - run:
          name: Tests
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v "$PWD":/usr/src/app --name project alpine:3.4 /bin/true
            # copy a config file into this volume
            docker cp . project:/usr/src/app
            # start an application container using this volume
            docker run -t -e CI=true --network container:elasticsearch --volumes-from project -w /usr/src/app "node:10" npm run test:ci
      - run:
          name: Copy tests results back to project
          command: docker cp project:/usr/src/app/.ci-test-results "$PWD/.ci-test-results"
      - run:
          name: Check ES is still alive on error
          command: docker run --network container:elasticsearch appropriate/curl --retry 5 --retry-delay 1 --retry-connrefused http://127.0.0.1:9200/_cat/health
          when: on_fail
      # Allow to show ES version of events on error
      - run:
          name: Get ES logs for this failure
          command: docker logs elasticsearch
          when: on_fail
      - store_test_results:
          path: .ci-test-results

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      # Run lint
      - run: yarn lint

  release-dry-run:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: release
          command: npm run semantic-release --dry-run || true
  release:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: release
          command: npm run semantic-release

workflows:
  version: 2
  all:
    jobs:
      - docker-compose
      - checkout
      - install:
          requires:
            - checkout
      - test:
          requires:
            - docker-compose
            - install
      - lint:
          requires:
            - install
      - release-dry-run:
          requires:
            - test
            - lint
          filters:
            branches:
              ignore: master
      - release:
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
